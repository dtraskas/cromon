### Reusable workflow to download terraform artifact built by `tf_plan` and apply the artifact/plan ###
### Based on: https://github.com/Pwd9000-ML/Azure-Terraform-Deployments

name: "Build TF Plan"
on:
  workflow_call:
    inputs:
      path:
        description: 'Specifies the path of the root terraform module.'
        # required: true
        required: false
        type: string
      tf_version:
        description: 'Specifies version of Terraform to use. e.g: 1.1.0 Default=latest.'
        required: false
        type: string
        default: latest
      environment:
        description: 'Specifies the GitHub deployment environment.'
        required: false
        type: string
      tf_key:
        description: 'Specifies the Terraform state file name for this plan. Workflow artifact will use same name'
        required: true
        type: string
      tf_vars_file:
        description: 'Specifies the Terraform TFVARS file.'
        required: true
        type: string    
    secrets:
      aws_account:
        description: 'Specifies the AWS account name.'
        required: true
      aws_account_id:
        description: 'Specifies the AWS account ID.'
        required: true
      aws_region:
        description: 'Specifies the AWS region.'
        required: true
      deploy_role:
        description: 'Specifies the AWS deployment role.'
        required: true

jobs:
  apply-plan:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    defaults:
      run:
        shell: bash
        # working-directory: ${{ inputs.path }}

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.tf_key }}
          # path: ${{ inputs.path }}

      - name: Decompress TF Plan artifact
        run: unzip ${{ inputs.tf_key }}.zip; cd terraform

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.tf_version }}
          terraform_wrapper: false
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.deploy_role }}
          aws-region: ${{ secrets.aws_region }}
          role-session-name: OIDCSession           

      - name: Terraform init
        id: init
        run: | 
          terraform init \
          -backend-config="bucket=${{ secrets.aws_account }}-terraform-remote-state" \
          -backend-config="key=cromon/${{ inputs.environment }}/terraform.tfstate" \
          -backend-config="dynamodb_table=${{ secrets.aws_account }}-tf-state-dynamodb-lock"

      - name: Terraform Apply
        run: terraform apply plan.tfplan